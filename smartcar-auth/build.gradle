apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

buildscript {
    repositories {
        mavenCentral()
    }
}

group = libGroup
version = libVersion

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    lintOptions {
        disable 'UnusedResources'
        abortOnError true
    }
    buildTypes {
       debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation 'androidx.browser:browser:1.0.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    testAnnotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.robolectric:robolectric:4.3'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file('../docs')
    options.header = libDescription
    options.windowTitle = "${libName} - ${libVersion}"
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addBooleanOption('notimestamp', true)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives androidSourcesJar
}

/**
 * Configures packaging of modules/artifacts to publish.
 *
 * @plugin maven-publish
 */
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId libGroup
                artifactId libName
                version libVersion

                artifact androidSourcesJar
                artifact javadocJar

                pom {
                    // https://central.sonatype.org/publish/requirements/#sufficient-metadata
                    name = libName
                    description = libDescription
                    url = 'https://github.com/smartcar/android-sdk'

                    packaging 'aar'

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id = 'smartcar'
                            name = 'Smartcar'
                            email = 'hello@smartcar.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/smartcar/android-sdk.git'
                        developerConnection = 'scm:git:ssh://github.com:smartcar/android-sdk.git'
                        url = 'https://github.com/smartcar/android-sdk.git'
                    }
                }
            }
        }
    }
}

/**
 * Requires the following environment variables to be set:
 *  - ORG_GRADLE_PROJECT_signingKey
 *  - ORG_GRADLE_PROJECT_signingPassword
 *
 * @see https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
 */
afterEvaluate {
    signing {
        useInMemoryPgpKeys findProperty("signingKey"), findProperty("signingPassword")
        sign publishing.publications.release
    }
}
