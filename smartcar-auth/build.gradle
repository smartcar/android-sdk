apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco-android'
apply plugin: 'com.github.dcendents.android-maven'

group = libGroup

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.4'
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    lintOptions {
        disable 'UnusedResources'
        abortOnError true
    }
    buildTypes {
       debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task compositeCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"
    ])
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation 'androidx.browser:browser:1.0.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    testAnnotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.robolectric:robolectric:4.3'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file('../docs')
    options.header = libDescription
    options.windowTitle = "${libName} - ${libVersion}"
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addBooleanOption('notimestamp', true)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            name libName
            description libDescription
            url libUrl

            packaging 'aar'
            groupId libGroup
            artifactId libName
            version libVersion

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                url vcsRepoUrl
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publish = true
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = libName
        userOrg = bintrayOrg
        licenses = [licenseId]
        desc = libDescription
        websiteUrl = developerWebsite
        issueTrackerUrl = developerIssues
        vcsUrl = vcsRepoUrl
        publish = true
        publicDownloadNumbers = true
        githubRepo = vcsGithubRepo
        version {
            name = libVersion
            vcsTag = 'v' + libVersion
            released = new Date()
        }
    }
}
